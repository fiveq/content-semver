{"name":"Content-Semver","tagline":"Content-based Semantic Versioning Specification","body":"Content-based Semantic Versioning 1.0.0\r\n=======================================\r\n\r\nSummary\r\n-------\r\n\r\nGiven a version number MAJOR.MINOR.PATCH, increment the:\r\n\r\n1. MAJOR version when you make non-atomic feature changes to the codebase or refactor\r\n   substanial site content or design\r\n1. MINOR version when you add an atomic feature or redesign one part of the\r\n   content or style of the site\r\n1. PATCH version when you make bug fixes, changes which do not add new\r\n   functionality but repairs broken functionality.\r\n\r\nAdditional labels for pre-release and build metadata are available as extensions\r\nto the MAJOR.MINOR.PATCH format.\r\n\r\n\r\nIntroduction\r\n------------\r\n\r\nTom Preston-Warner developed the formal definition of Semantic Versioning some\r\ntime ago, and it was great. It formalized much of what software developers do\r\non a regular basis and provides version numbers that hold semantic value. That\r\nis, at a glance you can tell what relationship v2.1.22 has to v1.5.0 or\r\nv3.2.1.\r\n\r\nThe world rejoiced.\r\n\r\nThere is one oversight in this methodology. Not all codebases involve public\r\nAPIs, a precondition for TPW's Semantic Versioning. Given this restriction, we\r\nhave developed an alternate version of Semantic Versioning which we call\r\nContent-based Semantic Versioning.\r\n\r\nIn this world, your codebase versions are not dictated intrinsically by breaking\r\nor adding features to public APIs. Rather, they are determined by whether a\r\nfeature inovlves non-atomic or atomic feature changes. Patch level versions\r\nremain the same. I'll admit, there's more room for interpretation in a project\r\nunder CBSV, even TPW admitted that under traditional SV one must be ever\r\nvigilant about codebase changes and such.\r\n\r\nOne final caveat, CBSV was created primarly to manage content-heavy website\r\ncodebases. Thus, most of this document is nearly identical to the original but\r\ninstead of a public API, the goal of versions is to manage changes to the\r\ncontent structure and, in the case of websites, URL structure.\r\n\r\n\r\nSemantic Versioning Specification (SemVer)\r\n------------------------------------------\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\r\n\"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be\r\ninterpreted as described in [RFC 2119](http://tools.ietf.org/html/rfc2119).\r\n\r\n1. Software using API-less Semantic Versioning MUST declare a content\r\n   structure. This content structure can be extrapolated from the code or\r\n   documented outside the code. However it is done, it should be precise and\r\n   comprehensive.\r\n\r\n1. A normal version number MUST take the form X.Y.Z where X, Y, and Z are\r\nnon-negative integers, and MUST NOT contain leading zeroes. X is the\r\nmajor version, Y is the minor version, and Z is the patch version.\r\nEach element MUST increase numerically. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.\r\n\r\n1. Once a versioned package has been released, the contents of that version\r\nMUST NOT be modified. Any modifications MUST be released as a new version.\r\n\r\n1. Major version zero (0.y.z) is for initial development. Anything may change\r\nat any time. The content structure should not be considered stable.\r\n\r\n1. Version 1.0.0 defines the content structure. The way in which the version number\r\nis incremented after this release is dependent on this content structure and how it\r\nchanges.\r\n\r\n1. Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards\r\ncompatible bug fixes are introduced. A bug fix is defined as an internal\r\nchange that fixes incorrect behavior.\r\n\r\n1. Minor version Y (x.Y.z | x > 0) MUST be incremented if new, atomic\r\nchanges to contect structure or URLs is introduced to the codebase. It MUST be\r\nincremented if any atomic funcationality is marked as deprecated. It MAY be\r\nincremented if substantial new functionality or improvements are introduced\r\nwithin the private code. It MAY include patch level changes. Patch version\r\nMUST be reset to 0 when minor version is incremented.\r\n\r\n1. Major version X (X.y.z | X > 0) MUST be incremented if any non-atomic\r\n   changes to content structure or URLs is introduced to the codebase. It MAY\r\n   also include minor and patch level changes. Patch and minor version MUST be \r\n   reset to 0 when major version is incremented.\r\n\r\n1. A pre-release version MAY be denoted by appending a hyphen and a\r\nseries of dot separated identifiers immediately following the patch\r\nversion. Identifiers MUST comprise only ASCII alphanumerics and hyphen\r\n[0-9A-Za-z-]. Identifiers MUST NOT be empty. Numeric identifiers MUST\r\nNOT include leading zeroes. Pre-release versions have a lower\r\nprecedence than the associated normal version. A pre-release version\r\nindicates that the version is unstable and might not satisfy the\r\nintended compatibility requirements as denoted by its associated\r\nnormal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7,\r\n1.0.0-x.7.z.92.\r\n\r\n1. Build metadata MAY be denoted by appending a plus sign and a series of dot\r\nseparated identifiers immediately following the patch or pre-release version.\r\nIdentifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-].\r\nIdentifiers MUST NOT be empty. Build metadata MUST be ignored when determining\r\nversion precedence. Thus two versions that differ only in the build metadata,\r\nhave the same precedence. Examples: 1.0.0-alpha+001, 1.0.0+20130313144700,\r\n1.0.0-beta+exp.sha.5114f85.\r\n\r\n1. Precedence refers to how versions are compared to each other when ordered.\r\nPrecedence MUST be calculated by separating the version into major, minor, patch\r\nand pre-release identifiers in that order (Build metadata does not figure\r\ninto precedence). Precedence is determined by the first difference when\r\ncomparing each of these identifiers from left to right as follows: Major, minor,\r\nand patch versions are always compared numerically. Example: 1.0.0 < 2.0.0 <\r\n2.1.0 < 2.1.1. When major, minor, and patch are equal, a pre-release version has\r\nlower precedence than a normal version. Example: 1.0.0-alpha < 1.0.0. Precedence\r\nfor two pre-release versions with the same major, minor, and patch version MUST\r\nbe determined by comparing each dot separated identifier from left to right\r\nuntil a difference is found as follows: identifiers consisting of only digits\r\nare compared numerically and identifiers with letters or hyphens are compared\r\nlexically in ASCII sort order. Numeric identifiers always have lower precedence\r\nthan non-numeric identifiers. A larger set of pre-release fields has a higher\r\nprecedence than a smaller set, if all of the preceding identifiers are equal.\r\nExample: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta <\r\n1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\r\n\r\nBackusâ€“Naur Form Grammar for Valid SemVer Versions\r\n--------------------------------------------------\r\n\r\n    <valid semver> ::= <version core>\r\n                     | <version core> \"-\" <pre-release>\r\n                     | <version core> \"+\" <build>\r\n                     | <version core> \"-\" <pre-release> \"+\" <build>\r\n\r\n    <version core> ::= <major> \".\" <minor> \".\" <patch>\r\n\r\n    <major> ::= <numeric identifier>\r\n\r\n    <minor> ::= <numeric identifier>\r\n\r\n    <patch> ::= <numeric identifier>\r\n\r\n    <pre-release> ::= <dot-separated pre-release identifiers>\r\n\r\n    <dot-separated pre-release identifiers> ::= <pre-release identifier>\r\n                                              | <pre-release identifier> \".\" <dot-separated pre-release identifiers>\r\n\r\n    <build> ::= <dot-separated build identifiers>\r\n\r\n    <dot-separated build identifiers> ::= <build identifier>\r\n                                        | <build identifier> \".\" <dot-separated build identifiers>\r\n\r\n    <pre-release identifier> ::= <alphanumeric identifier>\r\n                               | <numeric identifier>\r\n\r\n    <build identifier> ::= <alphanumeric identifier>\r\n                         | <digits>\r\n\r\n    <alphanumeric identifier> ::= <non-digit>\r\n                                | <non-digit> <identifier characters>\r\n                                | <identifier characters> <non-digit>\r\n                                | <identifier characters> <non-digit> <identifier characters>\r\n\r\n    <numeric identifier> ::= \"0\"\r\n                           | <positive digit>\r\n                           | <positive digit> <digits>\r\n\r\n    <identifier characters> ::= <identifier character>\r\n                              | <identifier character> <identifier characters>\r\n\r\n    <identifier character> ::= <digit>\r\n                             | <non-digit>\r\n\r\n    <non-digit> ::= <letter>\r\n                  | \"-\"\r\n\r\n    <digits> ::= <digit>\r\n               | <digit> <digits>\r\n\r\n    <digit> ::= \"0\"\r\n              | <positive digit>\r\n\r\n    <positive digit> ::= \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\r\n\r\n    <letter> ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\"\r\n               | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\"\r\n               | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\"\r\n               | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\"\r\n               | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\"\r\n               | \"y\" | \"z\"\r\n\r\n\r\nWhy Use Semantic Versioning?\r\n----------------------------\r\n\r\nThis is not a new or revolutionary idea. In fact, you probably do something\r\nclose to this already. The problem is that \"close\" isn't good enough. Without\r\ncompliance to some sort of formal specification, version numbers are\r\nessentially useless for dependency management. By giving a name and clear\r\ndefinition to the above ideas, it becomes easy to communicate your intentions\r\nto the users of your software. Once these intentions are clear, flexible (but\r\nnot too flexible) dependency specifications can finally be made.\r\n\r\nA simple example will demonstrate how Semantic Versioning can make dependency\r\nhell a thing of the past. Consider a library called \"Firetruck.\" It requires a\r\nSemantically Versioned package named \"Ladder.\" At the time that Firetruck is\r\ncreated, Ladder is at version 3.1.0. Since Firetruck uses some functionality\r\nthat was first introduced in 3.1.0, you can safely specify the Ladder\r\ndependency as greater than or equal to 3.1.0 but less than 4.0.0. Now, when\r\nLadder version 3.1.1 and 3.2.0 become available, you can release them to your\r\npackage management system and know that they will be compatible with existing\r\ndependent software.\r\n\r\nAs a responsible developer you will, of course, want to verify that any\r\npackage upgrades function as advertised. The real world is a messy place;\r\nthere's nothing we can do about that but be vigilant. What you can do is let\r\nSemantic Versioning provide you with a sane way to release and upgrade\r\npackages without having to roll new versions of dependent packages, saving you\r\ntime and hassle.\r\n\r\nIf all of this sounds desirable, all you need to do to start using Semantic\r\nVersioning is to declare that you are doing so and then follow the rules. Link\r\nto this website from your README so others know the rules and can benefit from\r\nthem.\r\n\r\n\r\nFAQ\r\n---\r\n\r\n### How should I deal with revisions in the 0.y.z initial development phase?\r\n\r\nThe simplest thing to do is start your initial development release at 0.1.0\r\nand then increment the minor version for each subsequent release.\r\n\r\nAbout\r\n-----\r\n\r\nHighly derivative of The Semantic Versioning specification authored by [Tom\r\nPreston-Werner](http://tom.preston-werner.com) \r\n\r\nIf you'd like to leave feedback, please [open an issue on\r\nGitHub](https://github.com/fiveq/semver/issues).\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCreative Commons - CC BY 3.0\r\nhttp://creativecommons.org/licenses/by/3.0/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}